// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package futures

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/vv1zard/go-binance/v2/common"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures(in *jlexer.Lexer, out *WsUserDataEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = UserDataEventType(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "cw":
			out.CrossWalletBalance = string(in.String())
		case "p":
			if in.IsNull() {
				in.Skip()
				out.MarginCallPositions = nil
			} else {
				in.Delim('[')
				if out.MarginCallPositions == nil {
					if !in.IsDelim(']') {
						out.MarginCallPositions = make([]WsPosition, 0, 0)
					} else {
						out.MarginCallPositions = []WsPosition{}
					}
				} else {
					out.MarginCallPositions = (out.MarginCallPositions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 WsPosition
					(v1).UnmarshalEasyJSON(in)
					out.MarginCallPositions = append(out.MarginCallPositions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "T":
			out.TransactionTime = int64(in.Int64())
		case "a":
			(out.AccountUpdate).UnmarshalEasyJSON(in)
		case "o":
			(out.OrderTradeUpdate).UnmarshalEasyJSON(in)
		case "ac":
			(out.AccountConfigUpdate).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures(out *jwriter.Writer, in WsUserDataEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"cw\":"
		out.RawString(prefix)
		out.String(string(in.CrossWalletBalance))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		if in.MarginCallPositions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.MarginCallPositions {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.TransactionTime))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		(in.AccountUpdate).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		(in.OrderTradeUpdate).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ac\":"
		out.RawString(prefix)
		(in.AccountConfigUpdate).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsUserDataEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsUserDataEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsUserDataEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsUserDataEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures1(in *jlexer.Lexer, out *WsTradeEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "t":
			out.TradeID = int64(in.Int64())
		case "p":
			out.Price = string(in.String())
		case "q":
			out.Quantity = string(in.String())
		case "b":
			out.BuyerOrderID = int64(in.Int64())
		case "a":
			out.SellerOrderID = int64(in.Int64())
		case "T":
			out.TradeTime = int64(in.Int64())
		case "m":
			out.Maker = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures1(out *jwriter.Writer, in WsTradeEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeID))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.Quantity))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		out.Int64(int64(in.BuyerOrderID))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.Int64(int64(in.SellerOrderID))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeTime))
	}
	{
		const prefix string = ",\"m\":"
		out.RawString(prefix)
		out.Bool(bool(in.Maker))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsTradeEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsTradeEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsTradeEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsTradeEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures1(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures2(in *jlexer.Lexer, out *WsPosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Symbol = string(in.String())
		case "ps":
			out.Side = PositionSideType(in.String())
		case "pa":
			out.Amount = string(in.String())
		case "mt":
			out.MarginType = MarginType(in.String())
		case "iw":
			out.IsolatedWallet = string(in.String())
		case "ep":
			out.EntryPrice = string(in.String())
		case "mp":
			out.MarkPrice = string(in.String())
		case "up":
			out.UnrealizedPnL = string(in.String())
		case "cr":
			out.AccumulatedRealized = string(in.String())
		case "mm":
			out.MaintenanceMarginRequired = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures2(out *jwriter.Writer, in WsPosition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"ps\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"pa\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"mt\":"
		out.RawString(prefix)
		out.String(string(in.MarginType))
	}
	{
		const prefix string = ",\"iw\":"
		out.RawString(prefix)
		out.String(string(in.IsolatedWallet))
	}
	{
		const prefix string = ",\"ep\":"
		out.RawString(prefix)
		out.String(string(in.EntryPrice))
	}
	{
		const prefix string = ",\"mp\":"
		out.RawString(prefix)
		out.String(string(in.MarkPrice))
	}
	{
		const prefix string = ",\"up\":"
		out.RawString(prefix)
		out.String(string(in.UnrealizedPnL))
	}
	{
		const prefix string = ",\"cr\":"
		out.RawString(prefix)
		out.String(string(in.AccumulatedRealized))
	}
	{
		const prefix string = ",\"mm\":"
		out.RawString(prefix)
		out.String(string(in.MaintenanceMarginRequired))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsPosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsPosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsPosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsPosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures2(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures3(in *jlexer.Lexer, out *WsOrderTradeUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Symbol = string(in.String())
		case "c":
			out.ClientOrderID = string(in.String())
		case "S":
			out.Side = SideType(in.String())
		case "o":
			out.Type = OrderType(in.String())
		case "f":
			out.TimeInForce = TimeInForceType(in.String())
		case "q":
			out.OriginalQty = string(in.String())
		case "p":
			out.OriginalPrice = string(in.String())
		case "ap":
			out.AveragePrice = string(in.String())
		case "sp":
			out.StopPrice = string(in.String())
		case "x":
			out.ExecutionType = OrderExecutionType(in.String())
		case "X":
			out.Status = OrderStatusType(in.String())
		case "i":
			out.ID = int64(in.Int64())
		case "l":
			out.LastFilledQty = string(in.String())
		case "z":
			out.AccumulatedFilledQty = string(in.String())
		case "L":
			out.LastFilledPrice = string(in.String())
		case "N":
			out.CommissionAsset = string(in.String())
		case "n":
			out.Commission = string(in.String())
		case "T":
			out.TradeTime = int64(in.Int64())
		case "t":
			out.TradeID = int64(in.Int64())
		case "b":
			out.BidsNotional = string(in.String())
		case "a":
			out.AsksNotional = string(in.String())
		case "m":
			out.IsMaker = bool(in.Bool())
		case "R":
			out.IsReduceOnly = bool(in.Bool())
		case "wt":
			out.WorkingType = WorkingType(in.String())
		case "ot":
			out.OriginalType = OrderType(in.String())
		case "ps":
			out.PositionSide = PositionSideType(in.String())
		case "cp":
			out.IsClosingPosition = bool(in.Bool())
		case "AP":
			out.ActivationPrice = string(in.String())
		case "cr":
			out.CallbackRate = string(in.String())
		case "pP":
			out.PriceProtect = bool(in.Bool())
		case "rp":
			out.RealizedPnL = string(in.String())
		case "V":
			out.STP = string(in.String())
		case "pm":
			out.PriceMode = string(in.String())
		case "gtd":
			out.GTD = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures3(out *jwriter.Writer, in WsOrderTradeUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"S\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.OriginalQty))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.OriginalPrice))
	}
	{
		const prefix string = ",\"ap\":"
		out.RawString(prefix)
		out.String(string(in.AveragePrice))
	}
	{
		const prefix string = ",\"sp\":"
		out.RawString(prefix)
		out.String(string(in.StopPrice))
	}
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix)
		out.String(string(in.ExecutionType))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.LastFilledQty))
	}
	{
		const prefix string = ",\"z\":"
		out.RawString(prefix)
		out.String(string(in.AccumulatedFilledQty))
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		out.String(string(in.LastFilledPrice))
	}
	{
		const prefix string = ",\"N\":"
		out.RawString(prefix)
		out.String(string(in.CommissionAsset))
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeTime))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeID))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		out.String(string(in.BidsNotional))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.String(string(in.AsksNotional))
	}
	{
		const prefix string = ",\"m\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMaker))
	}
	{
		const prefix string = ",\"R\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsReduceOnly))
	}
	{
		const prefix string = ",\"wt\":"
		out.RawString(prefix)
		out.String(string(in.WorkingType))
	}
	{
		const prefix string = ",\"ot\":"
		out.RawString(prefix)
		out.String(string(in.OriginalType))
	}
	{
		const prefix string = ",\"ps\":"
		out.RawString(prefix)
		out.String(string(in.PositionSide))
	}
	{
		const prefix string = ",\"cp\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsClosingPosition))
	}
	{
		const prefix string = ",\"AP\":"
		out.RawString(prefix)
		out.String(string(in.ActivationPrice))
	}
	{
		const prefix string = ",\"cr\":"
		out.RawString(prefix)
		out.String(string(in.CallbackRate))
	}
	{
		const prefix string = ",\"pP\":"
		out.RawString(prefix)
		out.Bool(bool(in.PriceProtect))
	}
	{
		const prefix string = ",\"rp\":"
		out.RawString(prefix)
		out.String(string(in.RealizedPnL))
	}
	{
		const prefix string = ",\"V\":"
		out.RawString(prefix)
		out.String(string(in.STP))
	}
	{
		const prefix string = ",\"pm\":"
		out.RawString(prefix)
		out.String(string(in.PriceMode))
	}
	{
		const prefix string = ",\"gtd\":"
		out.RawString(prefix)
		out.Int64(int64(in.GTD))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsOrderTradeUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOrderTradeUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsOrderTradeUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOrderTradeUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures3(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures4(in *jlexer.Lexer, out *WsMiniMarketTickerEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "c":
			out.ClosePrice = string(in.String())
		case "o":
			out.OpenPrice = string(in.String())
		case "h":
			out.HighPrice = string(in.String())
		case "l":
			out.LowPrice = string(in.String())
		case "v":
			out.Volume = string(in.String())
		case "q":
			out.QuoteVolume = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures4(out *jwriter.Writer, in WsMiniMarketTickerEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.ClosePrice))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.OpenPrice))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.String(string(in.HighPrice))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.LowPrice))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.String(string(in.Volume))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.QuoteVolume))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsMiniMarketTickerEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsMiniMarketTickerEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsMiniMarketTickerEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsMiniMarketTickerEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures4(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures5(in *jlexer.Lexer, out *WsMarketTickerEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "p":
			out.PriceChange = string(in.String())
		case "P":
			out.PriceChangePercent = string(in.String())
		case "w":
			out.WeightedAvgPrice = string(in.String())
		case "c":
			out.ClosePrice = string(in.String())
		case "Q":
			out.CloseQty = string(in.String())
		case "o":
			out.OpenPrice = string(in.String())
		case "h":
			out.HighPrice = string(in.String())
		case "l":
			out.LowPrice = string(in.String())
		case "v":
			out.BaseVolume = string(in.String())
		case "q":
			out.QuoteVolume = string(in.String())
		case "O":
			out.OpenTime = int64(in.Int64())
		case "C":
			out.CloseTime = int64(in.Int64())
		case "F":
			out.FirstID = int64(in.Int64())
		case "L":
			out.LastID = int64(in.Int64())
		case "n":
			out.TradeCount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures5(out *jwriter.Writer, in WsMarketTickerEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.PriceChange))
	}
	{
		const prefix string = ",\"P\":"
		out.RawString(prefix)
		out.String(string(in.PriceChangePercent))
	}
	{
		const prefix string = ",\"w\":"
		out.RawString(prefix)
		out.String(string(in.WeightedAvgPrice))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.ClosePrice))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		out.String(string(in.CloseQty))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.OpenPrice))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.String(string(in.HighPrice))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.LowPrice))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.String(string(in.BaseVolume))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.QuoteVolume))
	}
	{
		const prefix string = ",\"O\":"
		out.RawString(prefix)
		out.Int64(int64(in.OpenTime))
	}
	{
		const prefix string = ",\"C\":"
		out.RawString(prefix)
		out.Int64(int64(in.CloseTime))
	}
	{
		const prefix string = ",\"F\":"
		out.RawString(prefix)
		out.Int64(int64(in.FirstID))
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastID))
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsMarketTickerEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsMarketTickerEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsMarketTickerEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsMarketTickerEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures5(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures6(in *jlexer.Lexer, out *WsMarkPriceEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "p":
			out.MarkPrice = string(in.String())
		case "i":
			out.IndexPrice = string(in.String())
		case "P":
			out.EstimatedSettlePrice = string(in.String())
		case "r":
			out.FundingRate = string(in.String())
		case "T":
			out.NextFundingTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures6(out *jwriter.Writer, in WsMarkPriceEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.MarkPrice))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.String(string(in.IndexPrice))
	}
	{
		const prefix string = ",\"P\":"
		out.RawString(prefix)
		out.String(string(in.EstimatedSettlePrice))
	}
	{
		const prefix string = ",\"r\":"
		out.RawString(prefix)
		out.String(string(in.FundingRate))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.NextFundingTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsMarkPriceEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsMarkPriceEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsMarkPriceEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsMarkPriceEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures6(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures7(in *jlexer.Lexer, out *WsLiquidationOrderEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "o":
			(out.LiquidationOrder).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures7(out *jwriter.Writer, in WsLiquidationOrderEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		(in.LiquidationOrder).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsLiquidationOrderEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsLiquidationOrderEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsLiquidationOrderEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsLiquidationOrderEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures7(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures8(in *jlexer.Lexer, out *WsLiquidationOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Symbol = string(in.String())
		case "S":
			out.Side = SideType(in.String())
		case "o":
			out.OrderType = OrderType(in.String())
		case "f":
			out.TimeInForce = TimeInForceType(in.String())
		case "q":
			out.OrigQuantity = string(in.String())
		case "p":
			out.Price = string(in.String())
		case "ap":
			out.AvgPrice = string(in.String())
		case "X":
			out.OrderStatus = OrderStatusType(in.String())
		case "l":
			out.LastFilledQty = string(in.String())
		case "z":
			out.AccumulatedFilledQty = string(in.String())
		case "T":
			out.TradeTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures8(out *jwriter.Writer, in WsLiquidationOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"S\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.OrderType))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.OrigQuantity))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"ap\":"
		out.RawString(prefix)
		out.String(string(in.AvgPrice))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.String(string(in.OrderStatus))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.LastFilledQty))
	}
	{
		const prefix string = ",\"z\":"
		out.RawString(prefix)
		out.String(string(in.AccumulatedFilledQty))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsLiquidationOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsLiquidationOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsLiquidationOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsLiquidationOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures8(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures9(in *jlexer.Lexer, out *WsKlineEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "k":
			(out.Kline).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures9(out *jwriter.Writer, in WsKlineEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"k\":"
		out.RawString(prefix)
		(in.Kline).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsKlineEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsKlineEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsKlineEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsKlineEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures9(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures10(in *jlexer.Lexer, out *WsKline) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "t":
			out.StartTime = int64(in.Int64())
		case "T":
			out.EndTime = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "i":
			out.Interval = string(in.String())
		case "f":
			out.FirstTradeID = int64(in.Int64())
		case "L":
			out.LastTradeID = int64(in.Int64())
		case "o":
			out.Open = string(in.String())
		case "c":
			out.Close = string(in.String())
		case "h":
			out.High = string(in.String())
		case "l":
			out.Low = string(in.String())
		case "v":
			out.Volume = string(in.String())
		case "n":
			out.TradeNum = int64(in.Int64())
		case "x":
			out.IsFinal = bool(in.Bool())
		case "q":
			out.QuoteVolume = string(in.String())
		case "V":
			out.ActiveBuyVolume = string(in.String())
		case "Q":
			out.ActiveBuyQuoteVolume = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures10(out *jwriter.Writer, in WsKline) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.StartTime))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndTime))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.String(string(in.Interval))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.Int64(int64(in.FirstTradeID))
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastTradeID))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.Open))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.Close))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.String(string(in.High))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.Low))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.String(string(in.Volume))
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeNum))
	}
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFinal))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.QuoteVolume))
	}
	{
		const prefix string = ",\"V\":"
		out.RawString(prefix)
		out.String(string(in.ActiveBuyVolume))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		out.String(string(in.ActiveBuyQuoteVolume))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsKline) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsKline) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsKline) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsKline) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures10(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures11(in *jlexer.Lexer, out *WsDepthEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "T":
			out.TransactionTime = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "U":
			out.FirstUpdateID = int64(in.Int64())
		case "u":
			out.LastUpdateID = int64(in.Int64())
		case "pu":
			out.PrevLastUpdateID = int64(in.Int64())
		case "b":
			if in.IsNull() {
				in.Skip()
				out.Bids = nil
			} else {
				in.Delim('[')
				if out.Bids == nil {
					if !in.IsDelim(']') {
						out.Bids = make([]common.PriceLevel, 0, 2)
					} else {
						out.Bids = []common.PriceLevel{}
					}
				} else {
					out.Bids = (out.Bids)[:0]
				}
				for !in.IsDelim(']') {
					var v4 common.PriceLevel
					easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Common(in, &v4)
					out.Bids = append(out.Bids, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "a":
			if in.IsNull() {
				in.Skip()
				out.Asks = nil
			} else {
				in.Delim('[')
				if out.Asks == nil {
					if !in.IsDelim(']') {
						out.Asks = make([]common.PriceLevel, 0, 2)
					} else {
						out.Asks = []common.PriceLevel{}
					}
				} else {
					out.Asks = (out.Asks)[:0]
				}
				for !in.IsDelim(']') {
					var v5 common.PriceLevel
					easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Common(in, &v5)
					out.Asks = append(out.Asks, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures11(out *jwriter.Writer, in WsDepthEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.TransactionTime))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"U\":"
		out.RawString(prefix)
		out.Int64(int64(in.FirstUpdateID))
	}
	{
		const prefix string = ",\"u\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastUpdateID))
	}
	{
		const prefix string = ",\"pu\":"
		out.RawString(prefix)
		out.Int64(int64(in.PrevLastUpdateID))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		if in.Bids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Bids {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Common(out, v7)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		if in.Asks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Asks {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Common(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsDepthEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsDepthEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsDepthEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsDepthEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures11(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Common(in *jlexer.Lexer, out *common.PriceLevel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Price":
			out.Price = string(in.String())
		case "Quantity":
			out.Quantity = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Common(out *jwriter.Writer, in common.PriceLevel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Price\":"
		out.RawString(prefix[1:])
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"Quantity\":"
		out.RawString(prefix)
		out.String(string(in.Quantity))
	}
	out.RawByte('}')
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures12(in *jlexer.Lexer, out *WsComposition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "b":
			out.BaseAsset = string(in.String())
		case "w":
			out.WeightQty = string(in.String())
		case "W":
			out.WeighPercent = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures12(out *jwriter.Writer, in WsComposition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix[1:])
		out.String(string(in.BaseAsset))
	}
	{
		const prefix string = ",\"w\":"
		out.RawString(prefix)
		out.String(string(in.WeightQty))
	}
	{
		const prefix string = ",\"W\":"
		out.RawString(prefix)
		out.String(string(in.WeighPercent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsComposition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsComposition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsComposition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsComposition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures12(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures13(in *jlexer.Lexer, out *WsCompositeIndexEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "p":
			out.Price = string(in.String())
		case "c":
			if in.IsNull() {
				in.Skip()
				out.Composition = nil
			} else {
				in.Delim('[')
				if out.Composition == nil {
					if !in.IsDelim(']') {
						out.Composition = make([]WsComposition, 0, 1)
					} else {
						out.Composition = []WsComposition{}
					}
				} else {
					out.Composition = (out.Composition)[:0]
				}
				for !in.IsDelim(']') {
					var v10 WsComposition
					(v10).UnmarshalEasyJSON(in)
					out.Composition = append(out.Composition, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures13(out *jwriter.Writer, in WsCompositeIndexEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		if in.Composition == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Composition {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsCompositeIndexEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsCompositeIndexEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsCompositeIndexEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsCompositeIndexEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures13(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures14(in *jlexer.Lexer, out *WsBookTickerEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "u":
			out.UpdateID = int64(in.Int64())
		case "E":
			out.Time = int64(in.Int64())
		case "T":
			out.TransactionTime = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "b":
			out.BestBidPrice = string(in.String())
		case "B":
			out.BestBidQty = string(in.String())
		case "a":
			out.BestAskPrice = string(in.String())
		case "A":
			out.BestAskQty = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures14(out *jwriter.Writer, in WsBookTickerEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"u\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateID))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.TransactionTime))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		out.String(string(in.BestBidPrice))
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		out.String(string(in.BestBidQty))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.String(string(in.BestAskPrice))
	}
	{
		const prefix string = ",\"A\":"
		out.RawString(prefix)
		out.String(string(in.BestAskQty))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsBookTickerEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsBookTickerEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsBookTickerEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsBookTickerEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures14(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures15(in *jlexer.Lexer, out *WsBalance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "a":
			out.Asset = string(in.String())
		case "wb":
			out.Balance = string(in.String())
		case "cw":
			out.CrossWalletBalance = string(in.String())
		case "bc":
			out.ChangeBalance = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures15(out *jwriter.Writer, in WsBalance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix[1:])
		out.String(string(in.Asset))
	}
	{
		const prefix string = ",\"wb\":"
		out.RawString(prefix)
		out.String(string(in.Balance))
	}
	{
		const prefix string = ",\"cw\":"
		out.RawString(prefix)
		out.String(string(in.CrossWalletBalance))
	}
	{
		const prefix string = ",\"bc\":"
		out.RawString(prefix)
		out.String(string(in.ChangeBalance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsBalance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsBalance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsBalance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsBalance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures15(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures16(in *jlexer.Lexer, out *WsBLVTKlineEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "k":
			(out.Kline).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures16(out *jwriter.Writer, in WsBLVTKlineEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"k\":"
		out.RawString(prefix)
		(in.Kline).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsBLVTKlineEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsBLVTKlineEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsBLVTKlineEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsBLVTKlineEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures16(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures17(in *jlexer.Lexer, out *WsBLVTKline) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "t":
			out.StartTime = int64(in.Int64())
		case "T":
			out.CloseTime = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "i":
			out.Interval = string(in.String())
		case "f":
			out.FirstUpdateTime = int64(in.Int64())
		case "L":
			out.LastUpdateTime = int64(in.Int64())
		case "o":
			out.OpenPrice = string(in.String())
		case "c":
			out.ClosePrice = string(in.String())
		case "h":
			out.HighPrice = string(in.String())
		case "l":
			out.LowPrice = string(in.String())
		case "v":
			out.Leverage = string(in.String())
		case "n":
			out.Count = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures17(out *jwriter.Writer, in WsBLVTKline) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.StartTime))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.CloseTime))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.String(string(in.Interval))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.Int64(int64(in.FirstUpdateTime))
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastUpdateTime))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.OpenPrice))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.ClosePrice))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.String(string(in.HighPrice))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.LowPrice))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.String(string(in.Leverage))
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int64(int64(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsBLVTKline) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsBLVTKline) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsBLVTKline) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsBLVTKline) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures17(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures18(in *jlexer.Lexer, out *WsBLVTInfoEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "m":
			out.Issued = float64(in.Float64())
		case "b":
			if in.IsNull() {
				in.Skip()
				out.Baskets = nil
			} else {
				in.Delim('[')
				if out.Baskets == nil {
					if !in.IsDelim(']') {
						out.Baskets = make([]WsBLVTBasket, 0, 2)
					} else {
						out.Baskets = []WsBLVTBasket{}
					}
				} else {
					out.Baskets = (out.Baskets)[:0]
				}
				for !in.IsDelim(']') {
					var v13 WsBLVTBasket
					(v13).UnmarshalEasyJSON(in)
					out.Baskets = append(out.Baskets, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "n":
			out.Nav = float64(in.Float64())
		case "l":
			out.Leverage = float64(in.Float64())
		case "t":
			out.TargetLeverage = int64(in.Int64())
		case "f":
			out.FundingRate = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures18(out *jwriter.Writer, in WsBLVTInfoEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"m\":"
		out.RawString(prefix)
		out.Float64(float64(in.Issued))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		if in.Baskets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Baskets {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Float64(float64(in.Nav))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.Float64(float64(in.Leverage))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.TargetLeverage))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.Float64(float64(in.FundingRate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsBLVTInfoEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsBLVTInfoEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsBLVTInfoEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsBLVTInfoEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures18(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures19(in *jlexer.Lexer, out *WsBLVTBasket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Symbol = string(in.String())
		case "n":
			out.Position = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures19(out *jwriter.Writer, in WsBLVTBasket) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int64(int64(in.Position))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsBLVTBasket) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsBLVTBasket) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsBLVTBasket) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsBLVTBasket) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures19(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures20(in *jlexer.Lexer, out *WsAggTradeEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "a":
			out.AggregateTradeID = int64(in.Int64())
		case "p":
			out.Price = string(in.String())
		case "q":
			out.Quantity = string(in.String())
		case "f":
			out.FirstTradeID = int64(in.Int64())
		case "l":
			out.LastTradeID = int64(in.Int64())
		case "T":
			out.TradeTime = int64(in.Int64())
		case "m":
			out.Maker = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures20(out *jwriter.Writer, in WsAggTradeEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.Int64(int64(in.AggregateTradeID))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.Quantity))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.Int64(int64(in.FirstTradeID))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastTradeID))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeTime))
	}
	{
		const prefix string = ",\"m\":"
		out.RawString(prefix)
		out.Bool(bool(in.Maker))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsAggTradeEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsAggTradeEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsAggTradeEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsAggTradeEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures20(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures21(in *jlexer.Lexer, out *WsAccountUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "m":
			out.Reason = UserDataEventReasonType(in.String())
		case "B":
			if in.IsNull() {
				in.Skip()
				out.Balances = nil
			} else {
				in.Delim('[')
				if out.Balances == nil {
					if !in.IsDelim(']') {
						out.Balances = make([]WsBalance, 0, 1)
					} else {
						out.Balances = []WsBalance{}
					}
				} else {
					out.Balances = (out.Balances)[:0]
				}
				for !in.IsDelim(']') {
					var v16 WsBalance
					(v16).UnmarshalEasyJSON(in)
					out.Balances = append(out.Balances, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "P":
			if in.IsNull() {
				in.Skip()
				out.Positions = nil
			} else {
				in.Delim('[')
				if out.Positions == nil {
					if !in.IsDelim(']') {
						out.Positions = make([]WsPosition, 0, 0)
					} else {
						out.Positions = []WsPosition{}
					}
				} else {
					out.Positions = (out.Positions)[:0]
				}
				for !in.IsDelim(']') {
					var v17 WsPosition
					(v17).UnmarshalEasyJSON(in)
					out.Positions = append(out.Positions, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures21(out *jwriter.Writer, in WsAccountUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"m\":"
		out.RawString(prefix[1:])
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		if in.Balances == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Balances {
				if v18 > 0 {
					out.RawByte(',')
				}
				(v19).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"P\":"
		out.RawString(prefix)
		if in.Positions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Positions {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsAccountUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsAccountUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsAccountUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsAccountUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures21(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures22(in *jlexer.Lexer, out *WsAccountConfigUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Symbol = string(in.String())
		case "l":
			out.Leverage = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures22(out *jwriter.Writer, in WsAccountConfigUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.Int64(int64(in.Leverage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsAccountConfigUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsAccountConfigUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Futures22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsAccountConfigUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsAccountConfigUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Futures22(l, v)
}
