// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package binance

import (
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	common "github.com/vv1zard/go-binance/v2/common"
)

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2(in *jlexer.Lexer, out *WsUserDataEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = UserDataEventType(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "T":
			out.TransactionTime = int64(in.Int64())
		case "u":
			out.AccountUpdateTime = int64(in.Int64())
		case "B":
			if in.IsNull() {
				in.Skip()
				out.AccountUpdate = nil
			} else {
				in.Delim('[')
				if out.AccountUpdate == nil {
					if !in.IsDelim(']') {
						out.AccountUpdate = make([]WsAccountUpdate, 0, 1)
					} else {
						out.AccountUpdate = []WsAccountUpdate{}
					}
				} else {
					out.AccountUpdate = (out.AccountUpdate)[:0]
				}
				for !in.IsDelim(']') {
					var v1 WsAccountUpdate
					(v1).UnmarshalEasyJSON(in)
					out.AccountUpdate = append(out.AccountUpdate, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "BalanceUpdate":
			(out.BalanceUpdate).UnmarshalEasyJSON(in)
		case "OrderUpdate":
			(out.OrderUpdate).UnmarshalEasyJSON(in)
		case "OCOUpdate":
			(out.OCOUpdate).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2(out *jwriter.Writer, in WsUserDataEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.TransactionTime))
	}
	{
		const prefix string = ",\"u\":"
		out.RawString(prefix)
		out.Int64(int64(in.AccountUpdateTime))
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		if in.AccountUpdate == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.AccountUpdate {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"BalanceUpdate\":"
		out.RawString(prefix)
		(in.BalanceUpdate).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"OrderUpdate\":"
		out.RawString(prefix)
		(in.OrderUpdate).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"OCOUpdate\":"
		out.RawString(prefix)
		(in.OCOUpdate).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsUserDataEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsUserDataEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsUserDataEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsUserDataEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV21(in *jlexer.Lexer, out *WsTradeEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "t":
			out.TradeID = int64(in.Int64())
		case "p":
			out.Price = string(in.String())
		case "q":
			out.Quantity = string(in.String())
		case "b":
			out.BuyerOrderID = int64(in.Int64())
		case "a":
			out.SellerOrderID = int64(in.Int64())
		case "T":
			out.TradeTime = int64(in.Int64())
		case "m":
			out.IsBuyerMaker = bool(in.Bool())
		case "M":
			out.Placeholder = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV21(out *jwriter.Writer, in WsTradeEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeID))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.Quantity))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		out.Int64(int64(in.BuyerOrderID))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.Int64(int64(in.SellerOrderID))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeTime))
	}
	{
		const prefix string = ",\"m\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBuyerMaker))
	}
	{
		const prefix string = ",\"M\":"
		out.RawString(prefix)
		out.Bool(bool(in.Placeholder))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsTradeEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsTradeEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsTradeEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsTradeEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV21(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV22(in *jlexer.Lexer, out *WsPartialDepthEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Symbol":
			out.Symbol = string(in.String())
		case "lastUpdateId":
			out.LastUpdateID = int64(in.Int64())
		case "bids":
			if in.IsNull() {
				in.Skip()
				out.Bids = nil
			} else {
				in.Delim('[')
				if out.Bids == nil {
					if !in.IsDelim(']') {
						out.Bids = make([]common.PriceLevel, 0, 2)
					} else {
						out.Bids = []common.PriceLevel{}
					}
				} else {
					out.Bids = (out.Bids)[:0]
				}
				for !in.IsDelim(']') {
					var v4 common.PriceLevel
					easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Common(in, &v4)
					out.Bids = append(out.Bids, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "asks":
			if in.IsNull() {
				in.Skip()
				out.Asks = nil
			} else {
				in.Delim('[')
				if out.Asks == nil {
					if !in.IsDelim(']') {
						out.Asks = make([]common.PriceLevel, 0, 2)
					} else {
						out.Asks = []common.PriceLevel{}
					}
				} else {
					out.Asks = (out.Asks)[:0]
				}
				for !in.IsDelim(']') {
					var v5 common.PriceLevel
					easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Common(in, &v5)
					out.Asks = append(out.Asks, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV22(out *jwriter.Writer, in WsPartialDepthEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"lastUpdateId\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastUpdateID))
	}
	{
		const prefix string = ",\"bids\":"
		out.RawString(prefix)
		if in.Bids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Bids {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Common(out, v7)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"asks\":"
		out.RawString(prefix)
		if in.Asks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Asks {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Common(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsPartialDepthEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsPartialDepthEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsPartialDepthEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsPartialDepthEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV22(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Common(in *jlexer.Lexer, out *common.PriceLevel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Price":
			out.Price = string(in.String())
		case "Quantity":
			out.Quantity = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Common(out *jwriter.Writer, in common.PriceLevel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Price\":"
		out.RawString(prefix[1:])
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"Quantity\":"
		out.RawString(prefix)
		out.String(string(in.Quantity))
	}
	out.RawByte('}')
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV23(in *jlexer.Lexer, out *WsOrderUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Symbol = string(in.String())
		case "c":
			out.ClientOrderId = string(in.String())
		case "S":
			out.Side = string(in.String())
		case "o":
			out.Type = string(in.String())
		case "f":
			out.TimeInForce = TimeInForceType(in.String())
		case "q":
			out.Volume = string(in.String())
		case "p":
			out.Price = string(in.String())
		case "P":
			out.StopPrice = string(in.String())
		case "F":
			out.IceBergVolume = string(in.String())
		case "g":
			out.OrderListId = int64(in.Int64())
		case "C":
			out.OrigCustomOrderId = string(in.String())
		case "x":
			out.ExecutionType = string(in.String())
		case "X":
			out.Status = string(in.String())
		case "r":
			out.RejectReason = string(in.String())
		case "i":
			out.Id = int64(in.Int64())
		case "l":
			out.LatestVolume = string(in.String())
		case "z":
			out.FilledVolume = string(in.String())
		case "L":
			out.LatestPrice = string(in.String())
		case "N":
			out.FeeAsset = string(in.String())
		case "n":
			out.FeeCost = string(in.String())
		case "T":
			out.TransactionTime = int64(in.Int64())
		case "t":
			out.TradeId = int64(in.Int64())
		case "w":
			out.IsInOrderBook = bool(in.Bool())
		case "m":
			out.IsMaker = bool(in.Bool())
		case "O":
			out.CreateTime = int64(in.Int64())
		case "Z":
			out.FilledQuoteVolume = string(in.String())
		case "Y":
			out.LatestQuoteVolume = string(in.String())
		case "Q":
			out.QuoteVolume = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV23(out *jwriter.Writer, in WsOrderUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderId))
	}
	{
		const prefix string = ",\"S\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.Volume))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"P\":"
		out.RawString(prefix)
		out.String(string(in.StopPrice))
	}
	{
		const prefix string = ",\"F\":"
		out.RawString(prefix)
		out.String(string(in.IceBergVolume))
	}
	{
		const prefix string = ",\"g\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderListId))
	}
	{
		const prefix string = ",\"C\":"
		out.RawString(prefix)
		out.String(string(in.OrigCustomOrderId))
	}
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix)
		out.String(string(in.ExecutionType))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"r\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.LatestVolume))
	}
	{
		const prefix string = ",\"z\":"
		out.RawString(prefix)
		out.String(string(in.FilledVolume))
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		out.String(string(in.LatestPrice))
	}
	{
		const prefix string = ",\"N\":"
		out.RawString(prefix)
		out.String(string(in.FeeAsset))
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.String(string(in.FeeCost))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.TransactionTime))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeId))
	}
	{
		const prefix string = ",\"w\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsInOrderBook))
	}
	{
		const prefix string = ",\"m\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMaker))
	}
	{
		const prefix string = ",\"O\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateTime))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.String(string(in.FilledQuoteVolume))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.String(string(in.LatestQuoteVolume))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		out.String(string(in.QuoteVolume))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsOrderUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOrderUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsOrderUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOrderUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV23(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV24(in *jlexer.Lexer, out *WsOCOUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Symbol = string(in.String())
		case "g":
			out.OrderListId = int64(in.Int64())
		case "c":
			out.ContingencyType = string(in.String())
		case "l":
			out.ListStatusType = string(in.String())
		case "L":
			out.ListOrderStatus = string(in.String())
		case "r":
			out.RejectReason = string(in.String())
		case "C":
			out.ClientOrderId = string(in.String())
		case "O":
			if in.IsNull() {
				in.Skip()
				out.Orders = nil
			} else {
				in.Delim('[')
				if out.Orders == nil {
					if !in.IsDelim(']') {
						out.Orders = make([]WsOCOOrder, 0, 1)
					} else {
						out.Orders = []WsOCOOrder{}
					}
				} else {
					out.Orders = (out.Orders)[:0]
				}
				for !in.IsDelim(']') {
					var v10 WsOCOOrder
					(v10).UnmarshalEasyJSON(in)
					out.Orders = append(out.Orders, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV24(out *jwriter.Writer, in WsOCOUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"g\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderListId))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.ContingencyType))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.ListStatusType))
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		out.String(string(in.ListOrderStatus))
	}
	{
		const prefix string = ",\"r\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"C\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderId))
	}
	{
		const prefix string = ",\"O\":"
		out.RawString(prefix)
		if in.Orders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Orders {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsOCOUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOCOUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsOCOUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOCOUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV24(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV25(in *jlexer.Lexer, out *WsOCOOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Symbol = string(in.String())
		case "i":
			out.OrderId = int64(in.Int64())
		case "c":
			out.ClientOrderId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV25(out *jwriter.Writer, in WsOCOOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderId))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsOCOOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOCOOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsOCOOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOCOOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV25(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV26(in *jlexer.Lexer, out *WsMiniMarketsStatEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "c":
			out.LastPrice = string(in.String())
		case "o":
			out.OpenPrice = string(in.String())
		case "h":
			out.HighPrice = string(in.String())
		case "l":
			out.LowPrice = string(in.String())
		case "v":
			out.BaseVolume = string(in.String())
		case "q":
			out.QuoteVolume = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV26(out *jwriter.Writer, in WsMiniMarketsStatEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.LastPrice))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.OpenPrice))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.String(string(in.HighPrice))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.LowPrice))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.String(string(in.BaseVolume))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.QuoteVolume))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsMiniMarketsStatEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsMiniMarketsStatEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsMiniMarketsStatEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsMiniMarketsStatEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV26(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV27(in *jlexer.Lexer, out *WsMarketStatEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "p":
			out.PriceChange = string(in.String())
		case "P":
			out.PriceChangePercent = string(in.String())
		case "w":
			out.WeightedAvgPrice = string(in.String())
		case "x":
			out.PrevClosePrice = string(in.String())
		case "c":
			out.LastPrice = string(in.String())
		case "Q":
			out.CloseQty = string(in.String())
		case "b":
			out.BidPrice = string(in.String())
		case "B":
			out.BidQty = string(in.String())
		case "a":
			out.AskPrice = string(in.String())
		case "A":
			out.AskQty = string(in.String())
		case "o":
			out.OpenPrice = string(in.String())
		case "h":
			out.HighPrice = string(in.String())
		case "l":
			out.LowPrice = string(in.String())
		case "v":
			out.BaseVolume = string(in.String())
		case "q":
			out.QuoteVolume = string(in.String())
		case "O":
			out.OpenTime = int64(in.Int64())
		case "C":
			out.CloseTime = int64(in.Int64())
		case "F":
			out.FirstID = int64(in.Int64())
		case "L":
			out.LastID = int64(in.Int64())
		case "n":
			out.Count = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV27(out *jwriter.Writer, in WsMarketStatEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.PriceChange))
	}
	{
		const prefix string = ",\"P\":"
		out.RawString(prefix)
		out.String(string(in.PriceChangePercent))
	}
	{
		const prefix string = ",\"w\":"
		out.RawString(prefix)
		out.String(string(in.WeightedAvgPrice))
	}
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix)
		out.String(string(in.PrevClosePrice))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.LastPrice))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		out.String(string(in.CloseQty))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		out.String(string(in.BidPrice))
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		out.String(string(in.BidQty))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.String(string(in.AskPrice))
	}
	{
		const prefix string = ",\"A\":"
		out.RawString(prefix)
		out.String(string(in.AskQty))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.OpenPrice))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.String(string(in.HighPrice))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.LowPrice))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.String(string(in.BaseVolume))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.QuoteVolume))
	}
	{
		const prefix string = ",\"O\":"
		out.RawString(prefix)
		out.Int64(int64(in.OpenTime))
	}
	{
		const prefix string = ",\"C\":"
		out.RawString(prefix)
		out.Int64(int64(in.CloseTime))
	}
	{
		const prefix string = ",\"F\":"
		out.RawString(prefix)
		out.Int64(int64(in.FirstID))
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastID))
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int64(int64(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsMarketStatEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsMarketStatEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsMarketStatEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsMarketStatEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV27(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV28(in *jlexer.Lexer, out *WsKlineEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "k":
			(out.Kline).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV28(out *jwriter.Writer, in WsKlineEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"k\":"
		out.RawString(prefix)
		(in.Kline).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsKlineEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsKlineEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsKlineEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsKlineEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV28(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV29(in *jlexer.Lexer, out *WsKline) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "t":
			out.StartTime = int64(in.Int64())
		case "T":
			out.EndTime = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "i":
			out.Interval = string(in.String())
		case "f":
			out.FirstTradeID = int64(in.Int64())
		case "L":
			out.LastTradeID = int64(in.Int64())
		case "o":
			out.Open = string(in.String())
		case "c":
			out.Close = string(in.String())
		case "h":
			out.High = string(in.String())
		case "l":
			out.Low = string(in.String())
		case "v":
			out.Volume = string(in.String())
		case "n":
			out.TradeNum = int64(in.Int64())
		case "x":
			out.IsFinal = bool(in.Bool())
		case "q":
			out.QuoteVolume = string(in.String())
		case "V":
			out.ActiveBuyVolume = string(in.String())
		case "Q":
			out.ActiveBuyQuoteVolume = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV29(out *jwriter.Writer, in WsKline) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.StartTime))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndTime))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.String(string(in.Interval))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.Int64(int64(in.FirstTradeID))
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastTradeID))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.Open))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.Close))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.String(string(in.High))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.Low))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.String(string(in.Volume))
	}
	{
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeNum))
	}
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFinal))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.QuoteVolume))
	}
	{
		const prefix string = ",\"V\":"
		out.RawString(prefix)
		out.String(string(in.ActiveBuyVolume))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		out.String(string(in.ActiveBuyQuoteVolume))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsKline) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsKline) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsKline) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsKline) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV29(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV210(in *jlexer.Lexer, out *WsDepthEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "u":
			out.LastUpdateID = int64(in.Int64())
		case "U":
			out.FirstUpdateID = int64(in.Int64())
		case "b":
			if in.IsNull() {
				in.Skip()
				out.Bids = nil
			} else {
				in.Delim('[')
				if out.Bids == nil {
					if !in.IsDelim(']') {
						out.Bids = make([]common.PriceLevel, 0, 2)
					} else {
						out.Bids = []common.PriceLevel{}
					}
				} else {
					out.Bids = (out.Bids)[:0]
				}
				for !in.IsDelim(']') {
					var v13 common.PriceLevel
					easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Common(in, &v13)
					out.Bids = append(out.Bids, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "a":
			if in.IsNull() {
				in.Skip()
				out.Asks = nil
			} else {
				in.Delim('[')
				if out.Asks == nil {
					if !in.IsDelim(']') {
						out.Asks = make([]common.PriceLevel, 0, 2)
					} else {
						out.Asks = []common.PriceLevel{}
					}
				} else {
					out.Asks = (out.Asks)[:0]
				}
				for !in.IsDelim(']') {
					var v14 common.PriceLevel
					easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV2Common(in, &v14)
					out.Asks = append(out.Asks, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV210(out *jwriter.Writer, in WsDepthEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"u\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastUpdateID))
	}
	{
		const prefix string = ",\"U\":"
		out.RawString(prefix)
		out.Int64(int64(in.FirstUpdateID))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		if in.Bids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Bids {
				if v15 > 0 {
					out.RawByte(',')
				}
				easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Common(out, v16)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		if in.Asks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Asks {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV2Common(out, v18)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsDepthEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV210(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsDepthEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV210(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsDepthEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV210(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsDepthEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV210(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV211(in *jlexer.Lexer, out *WsCombinedTradeEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stream":
			out.Stream = string(in.String())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV211(out *jwriter.Writer, in WsCombinedTradeEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stream\":"
		out.RawString(prefix[1:])
		out.String(string(in.Stream))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsCombinedTradeEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV211(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsCombinedTradeEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV211(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsCombinedTradeEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV211(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsCombinedTradeEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV211(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV212(in *jlexer.Lexer, out *WsCombinedBookTickerEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(WsBookTickerEvent)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		case "stream":
			out.Stream = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV212(out *jwriter.Writer, in WsCombinedBookTickerEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil {
			out.RawString("null")
		} else {
			(*in.Data).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"stream\":"
		out.RawString(prefix)
		out.String(string(in.Stream))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsCombinedBookTickerEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV212(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsCombinedBookTickerEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV212(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsCombinedBookTickerEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV212(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsCombinedBookTickerEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV212(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV213(in *jlexer.Lexer, out *WsBookTickerEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "u":
			out.UpdateID = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "b":
			out.BestBidPrice = string(in.String())
		case "B":
			out.BestBidQty = string(in.String())
		case "a":
			out.BestAskPrice = string(in.String())
		case "A":
			out.BestAskQty = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV213(out *jwriter.Writer, in WsBookTickerEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"u\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UpdateID))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		out.String(string(in.BestBidPrice))
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		out.String(string(in.BestBidQty))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.String(string(in.BestAskPrice))
	}
	{
		const prefix string = ",\"A\":"
		out.RawString(prefix)
		out.String(string(in.BestAskQty))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsBookTickerEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV213(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsBookTickerEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV213(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsBookTickerEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV213(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsBookTickerEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV213(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV214(in *jlexer.Lexer, out *WsBalanceUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "a":
			out.Asset = string(in.String())
		case "d":
			out.Change = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV214(out *jwriter.Writer, in WsBalanceUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix[1:])
		out.String(string(in.Asset))
	}
	{
		const prefix string = ",\"d\":"
		out.RawString(prefix)
		out.String(string(in.Change))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsBalanceUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV214(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsBalanceUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV214(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsBalanceUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV214(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsBalanceUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV214(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV215(in *jlexer.Lexer, out *WsAggTradeEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.Event = string(in.String())
		case "E":
			out.Time = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "a":
			out.AggTradeID = int64(in.Int64())
		case "p":
			out.Price = string(in.String())
		case "q":
			out.Quantity = string(in.String())
		case "f":
			out.FirstBreakdownTradeID = int64(in.Int64())
		case "l":
			out.LastBreakdownTradeID = int64(in.Int64())
		case "T":
			out.TradeTime = int64(in.Int64())
		case "m":
			out.IsBuyerMaker = bool(in.Bool())
		case "M":
			out.Placeholder = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV215(out *jwriter.Writer, in WsAggTradeEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.Int64(int64(in.AggTradeID))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.Quantity))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.Int64(int64(in.FirstBreakdownTradeID))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastBreakdownTradeID))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeTime))
	}
	{
		const prefix string = ",\"m\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBuyerMaker))
	}
	{
		const prefix string = ",\"M\":"
		out.RawString(prefix)
		out.Bool(bool(in.Placeholder))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsAggTradeEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV215(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsAggTradeEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV215(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsAggTradeEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV215(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsAggTradeEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV215(l, v)
}
func easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV216(in *jlexer.Lexer, out *WsAccountUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "a":
			out.Asset = string(in.String())
		case "f":
			out.Free = string(in.String())
		case "l":
			out.Locked = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV216(out *jwriter.Writer, in WsAccountUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix[1:])
		out.String(string(in.Asset))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.String(string(in.Free))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.Locked))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsAccountUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV216(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsAccountUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd041cfEncodeGithubComVv1zardGoBinanceV216(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsAccountUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV216(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsAccountUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd041cfDecodeGithubComVv1zardGoBinanceV216(l, v)
}
